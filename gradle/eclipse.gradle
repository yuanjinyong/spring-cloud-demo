afterEvaluate { gradleProject ->
    def serverName = 'Apache Tomcat v8.0'

    plugins.withType(EclipsePlugin) {
        eclipse {
            if (plugins.hasPlugin(EclipseWtpPlugin)) {
                classpath {
                    defaultOutputDir = new File(projectDir, "${webAppDirName}/WEB-INF/classes")
                    containers "org.eclipse.jst.server.core.container/org.eclipse.jst.server.tomcat.runtimeTarget/${serverName}"
                }
            }

            project { project ->
                name = gradleProject == rootProject ? rootProject.name : (rootProject.name + '-' + gradleProject.path.replaceAll(':', '-').substring(1))
                comment = "${gradleProject.description}"

                file.withXml { xmlProvider ->
                    def addFilterNode = { Node filteredResource, Long id, String name, Integer type, String arguments ->
                        Node fileterNode = filteredResource.appendNode('filter')
                        fileterNode.appendNode('id', id)
                        fileterNode.appendNode('name', name)
                        fileterNode.appendNode('type', type)
                        Node matcherNode = fileterNode.appendNode('matcher')
                        matcherNode.appendNode('id', 'org.eclipse.ui.ide.multiFilter')
                        matcherNode.appendNode('arguments', arguments)
                    }

                    def nodeId = new Date().getTime()
                    Node projectNode = xmlProvider.asNode()
                    Node filteredResource = projectNode.appendNode('filteredResources')
                    //所有工程过滤掉svn目录和Gradle构建临时目录
                    addFilterNode(filteredResource, nodeId++, '', 30, '1.0-name-matches-true-false-.svn')
                    addFilterNode(filteredResource, nodeId++, '', 30, '1.0-name-matches-true-false-build')
                    if (gradleProject.equals(rootProject)) {
                        addFilterNode(filteredResource, nodeId++, '', 30, '1.0-name-matches-true-false-subprojects')
                    }
                }
            }

            if (plugins.hasPlugin(JavaPlugin)) {
                classpath {
                    downloadSources = true
                    downloadJavadoc = false

                    file {
                        whenMerged { classpath ->
                            def srcs = classpath.entries.findAll { entry -> entry.kind == 'src' }
                            def libs = classpath.entries.findAll { entry -> entry.kind == 'lib' }
                            def cons = classpath.entries.findAll { entry -> entry.kind == 'con' }
                            def output = classpath.entries.findAll { entry -> entry.kind == 'output' }
                
                            classpath.entries.clear()
                            classpath.entries.addAll(srcs)
                            classpath.entries.addAll(libs)
                            classpath.entries.addAll(cons.reverse())
                            classpath.entries.addAll(output)
                
                            classpath.entries.findAll { entry -> entry.kind == 'lib' }*.exported = true
                        }
                    }
                }

                //清理classes目录的任务
                task cleanClasses(type: Delete) {
                    group cleanEclipseClasspath.group
                    delete eclipse.classpath.defaultOutputDir
                    description = "删除${eclipse.classpath.defaultOutputDir}。"
                    onlyIf { eclipse.classpath.defaultOutputDir.exists() }
                    doFirst { logger.info(description) }
                }
                cleanEclipseClasspath.finalizedBy cleanClasses
            }
        }

        //清理.settings目录的任务
        task cleanEclipseSettings(type: Delete) {
            ext {
                eclipseSettingsDir = new File(projectDir, '.settings')
            }
            group cleanEclipse.group
            delete eclipseSettingsDir
            description = "删除${eclipseSettingsDir}。"
            onlyIf { eclipseSettingsDir.exists() }
            doFirst { logger.info(description) }
        }
        cleanEclipse.dependsOn cleanEclipseSettings
    }

    plugins.withType(EclipseWtpPlugin) {
        def libDir = new File(webAppDir, 'WEB-INF/lib')
        eclipse {
            wtp {
                component {
                    gradleProject.sourceSets.test.allSource.srcDirs.each { file ->
                        sourceDirs += file
                    }
                }

                facet {
                    file {
                        withXml { provider ->
                            Node node = provider.asNode()
                            node.fixed.find { it.@facet == 'jst.java' }.@facet = 'java'
                            node.installed.find { it.@facet == 'jst.java' }.@facet = 'java'
                            node.installed.find { it.@facet == 'jst.web' }.@version = '3.0'
                            node.appendNode('runtime', [name: "${serverName}"])
                            node.appendNode('fixed', [facet: 'wst.jsdt.web'])
                            node.appendNode('installed', [facet: 'wst.jsdt.web', version: '1.0'])
                        }
                    }
                }
            }
        }

        task copyDependencyLibs(type: Copy) {
            group eclipseClasspath.group
            from(configurations.compile+configurations.runtime-configurations.providedCompile-configurations.providedRuntime) {
                exclude 'tomcat-embed-*.jar', "${rootProject.name}-frontend-*.jar" // 这里排除内嵌的tomcat和前台工程的jar包，本地开发使用外部Tomcat，前台工程独立开发。
            }
            into libDir
            description = "复制依赖到的jar包到${destinationDir}。"
            doFirst { logger.info(description) }
            doLast {
                inputs.files.each { logger.info("复制文件：${it.absolutePath}") }
            }
        }
        eclipseClasspath.finalizedBy copyDependencyLibs

        task cleanDependencyLibs(type: Delete) {
            group cleanEclipseClasspath.group
            delete libDir
            description = "删除${libDir}。"
            doFirst { logger.info(description) }
        }
        cleanEclipseClasspath.finalizedBy cleanDependencyLibs
    }
}